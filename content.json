{"meta":{"title":"遊びたがりブログ","subtitle":"プログラミン / アナログゲーム製作","description":"プログラミングやゲームについて、遊ぶように学べる情報を配信しています。","author":"ざきさん","url":"https://asobitagari.github.io","root":"/"},"pages":[],"posts":[{"title":"【スパトレ】超初心者向けトレーニングコースを終えて","slug":"sptr-training-for-absolute-beginner-course-finished","date":"2021-02-06T17:00:51.000Z","updated":"2021-02-06T17:44:02.468Z","comments":true,"path":"sptr-training-for-absolute-beginner-course-finished/","link":"","permalink":"https://asobitagari.github.io/sptr-training-for-absolute-beginner-course-finished/","excerpt":"","text":"全十回の「超初心者向けトレーニングコース」がようやく終わりました。最初は、名前の聞き方などから始まり、後半は休日の過ごし方などの尋ね方などをロールプレイ形式で教わることができるコースでした。大体が知っている内容ではあるのですが、知っていはいてもなかなか会話で使うことは難しかったです。このコースに関しては全回同じトレーナーに教わってみました。別に他の先生を選んでも問題ないと思いますが、結構中途半端なところで終わってしまうことも多く、同じ続きからうまく始められるか謎だったので同じトレーナーを選択し続けてしまった感じです。トレーナーの方は喜んでくれました。 ただ、この「超初心者向けトレーニングコース」の主な目的は トレーニングを開始する上で、必要となるフレーズの習得 外国人トレーナーに慣れる の二つなので、やっとトレーニングが 開始できる！ ようになったわけです。そして、このトレーニングを通して自分が意識して変わっていかなければならない点に気づき始めました。 意識して口にしていく努力をする対象のフレーズ調子を聞かれた時の返し系 Same as usual Noting special 最高！とか絶好調！とかそんなニュアンスで返事をしたいときって、まずないですよね？かといって調子悪いわーって返す時もまずないです。トレーニング以外で調子悪いって返信するときはあると思うので、調子がいいって返事よりは、しゃべれるようになりたいですが、実際の開幕のあいさつではしゃべることってまずないんですよね。調子悪かった休んでしまいますので。そして、調子がいいぜ！って返す時は、なんか深堀されたら会話に詰まりそうなので、まだまだ自分には敷居が高いと感じてしまいます。なのにもかかわらず、なにも考えないと I&#39;m fine! って口からさらりと出てしまいます。もうこれしかでません。この調子がいいですの代表格みたいな返事ですが、この返答がネイティブに対していったいどれくらいの調子の良さを印象付けるのかさっぱりわからないですが、少なくとも大して調子の良さを感じていない自分の口から出るにはふさわしくないように感じてしまいます。なので、この二つのどちらかがさらりと出るようになりたいのですが、なかなか出てくれないんですよね。 開幕挨拶系 How are you doing? How have you been? How’s it going? 意識しないと、ついつい返事の後に何も言わないことが多くなってしまいます。相手から調子を聞かれて、それに返事をして終わりといった感じ。問い返したほうがより自然の会話だと思いますので、ちゃんと問い返すことを意識して受けていきたいです。初対面の人にはおかしいと思いますが、複数回、もしくは久しぶりに選んだトレーナーには、 How have you been? を使ってみたいですね。正直、トレーナーの調子なんて全然興味ないんですが、さらっと言えるようにはなっておきたいです。 トレーニングの後半の会は、今回使って行きたいフレーズをがちがちに固めてからトレーニングを受けていました。これからロールプレイのトレーニングが始まるのに、トレーニング前の挨拶からロールプレイをしていくわけですね。でも今回受ける内容を事前に確認して、前回までのロールプレイも復習して、そのロールプレイの中で教わったやり取りの中で即使えそうなものを意識的に取り込んでいかないと、全く同じトークしかしなくなってしまいますので、ある程度意識はしていく方が上達が早そうに感じました。 超初心者向けトレーニングコースが終わったので、他のトレーニングを既に受けてみたのですが、その感想はまた別に書いておきたいと思います。","categories":[],"tags":[{"name":"英会話","slug":"英会話","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"オンライン英会話","slug":"オンライン英会話","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"英語のできないエンジニアの英語学習記","slug":"英語のできないエンジニアの英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E3%81%AE%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"英語学習記","slug":"英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"オンライントレーニング","slug":"オンライントレーニング","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AC%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/"},{"name":"sptr","slug":"sptr","permalink":"https://asobitagari.github.io/tags/sptr/"},{"name":"SPTR","slug":"SPTR","permalink":"https://asobitagari.github.io/tags/SPTR/"},{"name":"スパトレ","slug":"スパトレ","permalink":"https://asobitagari.github.io/tags/%E3%82%B9%E3%83%91%E3%83%88%E3%83%AC/"}]},{"title":"NHKラジオ 英会話タイムトライアル始めました。","slug":"nhk-english-time-trial","date":"2021-01-29T07:56:58.000Z","updated":"2021-02-06T16:06:34.381Z","comments":true,"path":"nhk-english-time-trial/","link":"","permalink":"https://asobitagari.github.io/nhk-english-time-trial/","excerpt":"","text":"スパトレを前回始めたばかりですが、早速他のコンテンツにも手を出してみました。 使い勝手例題が今風で覚えやすい。すぐ使えそうな感じがするのがいいです。現在仕事では使う機会がないが、オンライン英会話で使えそうだと感じました。 良かった例題例というのも、会議室を1時間しかとっていないんです。 “レッスンは25分間しかないですからね。”こんな感じに直して使えそう。 例こちらの声は聞こえますか？聞こえます！ これはこのまま使えます。というかオンラインレッスンでも使っています。clearlyとか足したりして使っています。 例すみません。よく聞こえません。 今のところ、通信環境の悪い先生にはであったことがありませんが、そんな時にそのまま使えそうですよね。 例こんな時間につないでいただき、ありがとうございます。 24時間のオンラインレッスンなので、使える機会はあるかも。スパトレの講師はほぼフィリピン在住のようなので、時差が一時間ということを考えても夜遅くなら向こうも大抵遅い時間になりますね。 例この資料が見えますか？ これ、否定形にしてよく見えないみたいな感じにすれば、教材がよく見えなかったときに使えそうですね。 まとめこんな感じで、いまのオンライン化の時勢にマッチしたレッスン内容になっていて驚きでした。オンラインの先生からも、怖がらずに表現してみようとはいわれているので、アレンジが間違っているかもしれませんが、使えそうなアレンジをして使ってみます。 スパトレの先生は、自然な表現に直してくれます（おそらく他のオンラインレッスンの先生も）ので、使ってみた方が学習にはよさそうです。 (function(b,c,f,g,a,d,e){b.MoshimoAffiliateObject=a; b[a]=b[a]||function(){arguments.currentScript=c.currentScript ||c.scripts[c.scripts.length-2];(b[a].q=b[a].q||[]).push(arguments)}; c.getElementById(a)||(d=c.createElement(f),d.src=g, d.id=a,e=c.getElementsByTagName(\"body\")[0],e.appendChild(d))}) (window,document,\"script\",\"//dn.msmstatic.com/site/cardlink/bundle.js\",\"msmaflink\"); msmaflink({\"n\":\"NHKラジオ 英会話タイムトライアル 2021年2月号［雑誌］【電子書籍】\",\"b\":\"\",\"t\":\"\",\"d\":\"https:\\/\\/thumbnail.image.rakuten.co.jp\",\"c_p\":\"\",\"p\":[\"\\/@0_mall\\/rakutenkobo-ebooks\\/cabinet\\/1381\\/2000009331381.jpg\"],\"u\":{\"u\":\"https:\\/\\/item.rakuten.co.jp\\/rakutenkobo-ebooks\\/64773b9e336f358e84091251433a4511\\/\",\"t\":\"rakuten\",\"r_v\":\"\"},\"aid\":{\"rakuten\":\"2408397\",\"yahoo\":\"2408398\"},\"eid\":\"uQdLm\",\"s\":\"s\"}); リンク","categories":[],"tags":[{"name":"英会話","slug":"英会話","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"NHKラジオ","slug":"NHKラジオ","permalink":"https://asobitagari.github.io/tags/NHK%E3%83%A9%E3%82%B8%E3%82%AA/"},{"name":"英語のできないエンジニアの英語学習記","slug":"英語のできないエンジニアの英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E3%81%AE%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"英語学習記","slug":"英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"}]},{"title":"オンライン英会話　はじめました【英語のできないエンジニアの英語学習記】","slug":"started-learning-online-english-conversation","date":"2021-01-25T02:43:57.000Z","updated":"2021-02-06T16:05:44.668Z","comments":true,"path":"started-learning-online-english-conversation/","link":"","permalink":"https://asobitagari.github.io/started-learning-online-english-conversation/","excerpt":"","text":"2021/01/20 より、スパトレというオンライン英会話を受け始めました。 調べた限りで、毎日レッスンが可能なプランがあるオンライン英会話のサービスの中で最安値（税抜き月額¥2,980）。上位プランとして無制限のプランもあり、+2,000円ほどの料金設定になっています。7日間のお試し期間があり、どちらのプランも選択できたので無制限プランを選択してみました。他のオンライン英会話サービスと比べて面白いと感じたところは、フリートークのレッスンが一切なく、基本的には教材ベースでレッスンが進んでいく点でした。教材に関しては幾つかのオリジナル教材と指定の市販教本から選択でき、指定の市販教本は自前で用意する必要があります。ただ、オリジナル教材（無料）は潤沢といえるほどでもなく、また選べる市販教本も豊富といえるほどでもないなと感じました。もちろん全部買おうとしたらかなりの金額になるのは間違いないくらいには選べました。それに、そんなに買わなければならなくなるまえにはしゃべれるようになりたい、むしろオリジナル教材だけでしゃべれるようになりたいです。 初回は実力テストを行う必要があるので、テストしてもらいました。 いつかは英語を喋ったり、英語の技術情報がスラスラと読めるようになればなと、自分で買っていたテキスト「速読速聴・英単語 Basic2400」を読むようなことは、思い出すたびにしてきましたが結果は散々でした。 チャートグラフの欠点を大いに実感できるパラメータに・・・。左と真下がどうやら0のようで、値が詰まりまくってて何の項目だったかまるで分らない状態です。公式のHPにある例のグラフはちゃんと読めるようになっていたので、それを参考に読み解くことができたのが幸いでした。それにしてもこんなに小さなグラフになるとは・・・。 CEFR** A1 ** : 最下層かい！中一レベル（今は違うのかな）でした。先ほどの書籍は中学レベルからのおさらいなので奇しくもレベルに合ったものを読んでいた結果に・・・。 言語認識 (dictation)2/10 : 初級学習から3か月以内で今回のテストの内容がすべてリスニングできるようになるので安心してくださいとのコメントが。ほんかよ・・・。全くわからなかったぜ・・・。 意味理解 (listening)0/10 : 0ってなんなの？意味わかってないけど、言語の認識はしてたってことか？なんにせよ、これが0だと英（会話）には絶対にならんよね。 データベース (vocabulary)2/10 : 意味は理解できないけど 2/10 くらいは単語把握してるっぽい・・・。 組み立て (speaking)5/10 : こわっ！これでしゃべりがここまでできてるってどういうことなんだ・・・。理系志向だと辻褄ってものがあってない感満載なんだが・・・。 インタラクション (interaction)4/10 : 簡単な単語を使って作られた1文程度の文章なら理解できる・・・だと？ 文法 (grammar)0/10 : 日本人は文法はマニアなくらい知ってるよね？っていう日本の英語教育を受けてきたとは到底思えないスコアだ・・・。 音声化 (pronunciation)3/10 : よく知ってるフレーズに関しては流暢だけど、そうでないと途端日本語じみてきますね。みたいなニュアンスが書かれてる。 チャートには Lexile指数というものがあって、解説にはない。また解説にはあるがチャートには CEFRはない。内容的にはイコールではないはずだがどうなんだろう。 この診断結果には、各項目の解説の終わりにおすすめの教本が紹介されている。市販教本が多く紹介されているが、自分の結果とマッチさせるとたまたまこうなったのか、いつも市販教本が大目に紹介されるかはよくわからないが、オリジナル教材をざっと見た限り、文法系や単語系はそもそもよういしていなさそうではあった。まあ、このあたりは教本は紹介されているけど、同程度の本をお持ちなら自分で見直してみてくださいみたいなことも書いてあるから、サービスとして重視している部分が違うってことなのだろう。 レッスンの感想テストを受けた翌日から、日曜を抜かして毎日レッスンを受けてみた。あまりにもテストが散々だったので、オリジナル教材の中で一つだけある超初心者向けレッスン（全10回）を受けてみている。日に1つから２つほどレッスンが進む。いまなら小学生がするような内容のレッスンだが、なかなか口から英語が出てくれない自分にはむしろぴったりに感じた。ここで見栄を張って難しそうなレッスンから始めようとしなくてよかった。 このサービスの面白い点は、各トレーニングに対して宿題がある点です。レッスンを始める前までにその教材に対してどういう学習をしてくればいいのかが記されています。”とりあえず英会話をしてみる”というスタンスが不安な方はむしろこの宿題がいい予習になってやりやすいんじゃないかと思いました。かならず復習してくださいと出ている点も、授業後にその授業内容の録画が送られてくるのですが見直す契機になってくれます。 テストを受けた直後はむちゃくちゃ委縮して続けられないんじゃないかと思いましたが、トレーニングの幅の広さと事前事後の学習の後押しなどのおかげで、超初心者コースが終わった後は何を受けようかなどと考えられるくらい楽しめています。また、その会話外の学習量がそれなりにあるため、一日何回も受けるのは初心者にはむしろ効率的ではないのかなと感じましたので、お試し期間後は通常プランに戻そうと思いました。","categories":[],"tags":[{"name":"英会話","slug":"英会話","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"オンラインレッスン","slug":"オンラインレッスン","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%AC%E3%83%83%E3%82%B9%E3%83%B3/"},{"name":"オンライン英会話","slug":"オンライン英会話","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"英語のできないエンジニアの英語学習記","slug":"英語のできないエンジニアの英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E3%81%AE%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"英語学習記","slug":"英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"sptr","slug":"sptr","permalink":"https://asobitagari.github.io/tags/sptr/"},{"name":"SPTR","slug":"SPTR","permalink":"https://asobitagari.github.io/tags/SPTR/"},{"name":"スパトレ","slug":"スパトレ","permalink":"https://asobitagari.github.io/tags/%E3%82%B9%E3%83%91%E3%83%88%E3%83%AC/"}]},{"title":"技術書典9を終えて、技術書典10に向けて","slug":"after-gijutsushoten-9","date":"2020-12-09T02:42:55.000Z","updated":"2020-12-09T07:00:51.089Z","comments":true,"path":"after-gijutsushoten-9/","link":"","permalink":"https://asobitagari.github.io/after-gijutsushoten-9/","excerpt":"","text":"サークルの紹介技術書典https://techbookfest.org/organization/5754486291169280 Boothhttps://asobitagari.booth.pm/ 技術書典9で頒布したものAngular Panic!Angular入門本。緩いストーリー仕立てで話が展開され、簡単なアプリケーションの開発までができるようになるまでを解説。 Re:ゼロから始めるSlack Hubot開発Hubot本初めてHubotを作る方向けの解説と、筆者が実際に職場のHubotへ実装した、機能の実装例を紹介。著者はサークルメンバーの”PG marbo” 技術書典10技術書典10に向けて、新たにGOでAPIサーバを作るまでの本を書こうと思っています。もともと「Angular Panic!」は中止になった技術書典8に物理本として頒布しようと考えていたものをオンライン開催となった技術書典9で、電子書籍のみで頒布を行いました。この経験と、このイベントで買った複数の電子書籍と、ほかのメディア（Kindle, honto, BookLive!）などで買った電子書籍を呼んできた経験から、次の技術書典10もオンライン開催となることを意識して電子書籍としてもっとあるべき姿があるのではないかと感じるようになりました。その電子書籍として、電子書籍の技術書として向かうべき道の模索をかねて次の書籍は出版したいと考えています。お楽しみしていただけると幸いです。","categories":[],"tags":[{"name":"技術書典","slug":"技術書典","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8/"},{"name":"技術書典9","slug":"技術書典9","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B89/"},{"name":"技術書典10","slug":"技術書典10","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B810/"}]},{"title":"負荷テストツール","slug":"load-test","date":"2019-11-18T01:32:08.000Z","updated":"2020-12-09T02:48:00.472Z","comments":true,"path":"load-test/","link":"","permalink":"https://asobitagari.github.io/load-test/","excerpt":"","text":"負荷テストを行うためのツールいままでJMeterか、簡単に行うならApach Benchぐらいしか選択肢がなかった負荷テストツールですが、最近いくつか新しいツールを教えてもらったので、忘れないようにメモ。こういう面にもアンテナを伸ばしていかないと、エンジニアとして後れを取ってしまうなぁと感じる今日この頃。そのうち、ここに焦点を当てた記事も書いていきたい。 JMeter負荷テストといったらこれ。といった印象。というか、最近までこれ以外の方法をろくに知らなかった（apach benchをのぞく）。macで作ったシナリオをubuntuに持って行ったとき、バージョンが合わずに動かなくて苦労したことがある。GUIが使える環境かどうかでJMeterのバージョンも変わる。その時は結局ubuntu側に諸々入れてmacのバージョンに合わせた。そんなubuntuのインスタンスを各リージョンに立てて、システムにアクセスさせるテストを行ったことがある（AWS）。 https://jmeter.apache.org/ Vegeta最近知った負荷テストツール。Golang製であるのが売りだろうか。つまりJavaじゃない。 https://github.com/tsenart/vegeta Gatling軽量でスケールアウトし、スクリプト（Scala）でシナリオ（テスト）をつくれてxmlがいらないやつ。でもJDK8以上が必要。 https://gatling.io/ Tsung動作が軽い。付属ツールでHTMLでのレポートを出力可能。スレッド数での負荷調整ではなく、秒間〇セッションといった風な調整方法なので、そのまま秒間〇アクセスといった目標値を設定しやすい。","categories":[],"tags":[{"name":"load test","slug":"load-test","permalink":"https://asobitagari.github.io/tags/load-test/"},{"name":"development","slug":"development","permalink":"https://asobitagari.github.io/tags/development/"},{"name":"JMeter","slug":"JMeter","permalink":"https://asobitagari.github.io/tags/JMeter/"},{"name":"Vegeta","slug":"Vegeta","permalink":"https://asobitagari.github.io/tags/Vegeta/"}]},{"title":"dockerコンテナ","slug":"docker-container","date":"2019-11-10T04:41:34.000Z","updated":"2019-11-10T06:00:48.238Z","comments":true,"path":"docker-container/","link":"","permalink":"https://asobitagari.github.io/docker-container/","excerpt":"","text":"dockerコンテナ状態/ライフサイクルdockerコンテナはイメージと違い、状態を持っている。状態は、実行中・停止・破棄がある。 実行中docker container runで起動させると実行中となり、Dockerfileに記述されたCMDのコマンドを実行し終わるまで自動中となる。よって、デーモン/サーバー系のコマンドであれば任意に停止、もしくは異常終了するまでそのコンテナは実行中となるが、そうでない場合(lsコマンドなど即座に終了するもの)は、そのコマンドを終えるまでが実行中となる。CMDの実行が完了すると、コンテナは停止の状態へ移行する。 停止実行中であったコンテナが停止した状態。停止した状態なので、再利用が可能。停止した時点の情報を持っているので、ディスクなどの容量は使用している。 破棄停止状態のコンテナは明示的に破棄をしない限りディスクに残り続ける。頻繁に実行-&gt;停止を繰り返す運用の場合には、停止されたコンテナがたまるため（再利用されない限りは実行のたびに新たなコンテナが立ち上がる）、ディスク容量を圧迫していくことになる。完全に不要となったコンテナは削除を行った方がいい。ただし、一度破棄したコンテナを再び利用することはできないため、退避しなければいけない情報がないか確認してから行うこと。 コンテナ操作dockerのコンテナは、dockerイメージから作成を行う。作成が完了されると実行状態となる。イメージの指定方法は、イメージ名かイメージに割り振られたIDを指定することができる。 イメージ名での作成 1docker container run [options] イメージ名[:タグ] [コマンド] [コマンド引数...] イメージIDでの作成 1docker container run [options] イメージID [コマンド] [コマンド引数...] 名前付きコンテナイメージからコンテナを作成した場合、コンテナの名前は自動で割り振られる。 docker container ls [--all]を行った際にNAMES列に記載されているのが自動で割り振られたコンテナの名前。オプション--allを指定することで、停止中のコンテナについている名前も確認することができる。この名前を利用して、再利用することも可能。また、コンテナ起動時にオプションで名前を付けることもできる。 1docker container run --name [任意のコンテナ名] [イメージ名]:[タグ] イメージの指定の仕方はコンテナの起動の項目を参照。ホスト側のポートは省略することができ、省略時は自動で空いているエフェメラルポートが割り当てられる。割り当てられたポートはdocker container lsで表示されるportsの項目で確認できる。 実行中コンテナの標準出力を取得1docker container logs [-f] コンテナID/コンテナ名 -fをつけるとtail -fのように、指定したコンテナの標準出力を取得し続ける。 実行中コンテナでコマンドの実行1docker container exec [options] コンテナID/コンテナ名 コンテナで実行したいコマンド -i -i / -it sh で実行中のコンテナにシェルで操作ができる。 コンテナとのファイルコピーコンテナからホスト 1docker contaner cp [options] コンテナID/コンテナ名:コピー元パス コピー先ホストパス ホストからコンテナ 1docker container cp [option] コピー元ホストパス コンテナID/コンテナ名:コピー先パス コンテナの破棄1docker container prune [options] 停止中のコンテナを一括削除できる。 イメージの削除1docker image prune [options] 不要そうなdockerイメージをdockerが判断して削除してくれる。 いろいろ削除1docker system prune 停止中のコンテナ、ネットワーク、イメージ、ビルドキャッシュといった内容の削除をしてくれる。 コンテナの統計情報を取得docker container stats [options] コンテナ名/コンテナID[ ...(複数指定可)]","categories":[],"tags":[{"name":"development","slug":"development","permalink":"https://asobitagari.github.io/tags/development/"},{"name":"docker","slug":"docker","permalink":"https://asobitagari.github.io/tags/docker/"},{"name":"container","slug":"container","permalink":"https://asobitagari.github.io/tags/container/"}]},{"title":"Docker メモ","slug":"docker-memo","date":"2019-11-05T09:31:19.000Z","updated":"2019-11-10T05:53:29.356Z","comments":true,"path":"docker-memo/","link":"","permalink":"https://asobitagari.github.io/docker-memo/","excerpt":"","text":"DockerfileインストラクションFROM FROMは作成するDockerイメージのベースとなるイメージを指定でいる。 FROMで指定できるDockerイメージはDocker Hubに公開されているものから指定できる。 LABEL イメージ作者の情報などを記述。 ENV Dockerコンテナ内で使える環境変数を設定できる。 ARG ビルド時に指定する引数から値を受け取ることができる。 Dockerfile内で指定したARGの引数と、ビルド時に指定する引数はそろえる必要がある。 123456#コマンド：sampleargがそろえるべき名前&gt; docker image build --build-arg samplearg=okok -t example/dockerimage .#Dockerfileでは以下のように名前を指定して二行目のように値を取り出すことができる。ARG sampleargENV BUILD_ARG=$&#123;samplearg&#125; RUN RUNはDockerイメージビルド時に、Dockerコンテナ内で実行するコマンドを定義する。 RUNの引数には実行したいコマンドをそのまま記述する。 COPY COPYはDockerを動作させているホストマシン上のファイルやディレクトリをDockerコンテナ内にコピーするためのインストラクション。 CMD CMDはDockerコンテナとして実行する際に、コンテナ内で実行するプロセスを指定する。 RUNはイメージをビルドするために使い、CMDはコンテナ起動時に一度実行される。 ENTRYPOINT ENTRYPOINTにはコマンドを記述する。CMDはENTRYPOINTへの引数となる。–entrypointでrun時に指定することで上書きできる。 ビルド1docker image build -t イメージ[:タグ名] Dockerfileまでのパス タグ名は省略するとlatestとなる。 イメージからコンテナの実行1docker [container] run [-d] [-i] [-t] [-rm] [-v ホスト側ディレクトリ:コンテナ側ディレクトリ] イメージ名[/追加のパス]:タグ名 -dオプションをつけないとフォアグランドで実行されてしまう。-dをつけて起動した場合はコンテナIDが標準出力に出力される。containerは省略可能だが、最近の風潮ではタイプが長くなるがつけて記述するほうが好まれるらしい。 -i起動後にコンテナの標準入力との結びつきを維持する。 -t疑似端末を有効にする。大抵の場合-iと同時に用いられ、同時指定の-itが省略形として存在する。コンテナ起動後に、疑似端末が有効となり標準入力からコマンドを実行できるようになる。 -rmコンテナの終了時にコンテナを破棄する。 -vホストとコンテナ間でディレクトリやファイルの共有を行う。 そのほかオプション-f Dockerfileのファイル名を指定できる。省略時はDockerfile --pull=true ビルド時にFROMで指定したイメージをレジストリからダウンロードを必ず行う。省略時は、すでにダウンロード済みであれば、ホスト内のキャッシュからビルドを行い、存在しない場合はレジストリからダウンロードする。 起動中のコンテナの確認12docker container lsdocker ps 上記二つはどちらも同じ動作。表示項目のフィルタリングもできる。コンテナIDだけ抽出する場合は以下。 1docker container ls --filter &quot;ancestor=[イメージ名]&quot; [-q] -q でコンテナIDのみの抽出 起動中のコンテナの停止1docker container stop コンテナID/コンテナ名 docker container lsと組み合わせることができる。 1docker container stop $(docker container ls --filter &quot;ancestor=[イメージ名&quot; -q]) 停止中のコンテナの再起動1docker container restart コンテナID/コンテナ名 停止中のコンテナの破棄1docker container rm [-f] コンテナID/コンテナ名 -fオプションで実行中のコンテナの削除も可能。 dockerイメージの検索1docker search [options] 検索キーワード -f, --filter filter 出力をフィルターする。--format 文字列 出力をフォーマットする。--limit 数値 表示件数を指定の数値に制限する。--no-trunc 出力を省略せずに表示する。 dockerイメージの取得1docker image pull [options] リポジトリ名[:タグ名] 例によってタグ名を省略した場合はlatestが指定される。 ホスト内のイメージの一覧を取得1docker image ls [options] [リポジトリ[:タグ名]] ダウンロード済み、ビルド済みのイメージの一覧を表示する。 dockerイメージのタグ付け1docker image tag 元のイメージ名[:タグ名] 新しいイメージ名[:タグ名] タグ名を省略時はlatest docker Hub へログイン1docker login [-u id] [-p パスワード] オプションを省略した場合は対話式に進めることができる。ID&amp;PASSを入力して認証する。 docker hub イメージの登録1docker image push [options] リポジトリ名[:タグ名] ログイン済みであれば、自分のリポジトリにイメージを登録することができる。 ポートフォワーディングポートフォワーディングはdocker container runの起動コマンド時に-pオプションで指定できる。 1docker container run -d -p [ホストポート]:コンテナポート イメージの指定","categories":[],"tags":[{"name":"development","slug":"development","permalink":"https://asobitagari.github.io/tags/development/"},{"name":"docker","slug":"docker","permalink":"https://asobitagari.github.io/tags/docker/"},{"name":"container","slug":"container","permalink":"https://asobitagari.github.io/tags/container/"}]}],"categories":[],"tags":[{"name":"英会話","slug":"英会話","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"オンライン英会話","slug":"オンライン英会話","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E8%8B%B1%E4%BC%9A%E8%A9%B1/"},{"name":"英語のできないエンジニアの英語学習記","slug":"英語のできないエンジニアの英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E3%81%AE%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"英語学習記","slug":"英語学習記","permalink":"https://asobitagari.github.io/tags/%E8%8B%B1%E8%AA%9E%E5%AD%A6%E7%BF%92%E8%A8%98/"},{"name":"オンライントレーニング","slug":"オンライントレーニング","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AC%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/"},{"name":"sptr","slug":"sptr","permalink":"https://asobitagari.github.io/tags/sptr/"},{"name":"SPTR","slug":"SPTR","permalink":"https://asobitagari.github.io/tags/SPTR/"},{"name":"スパトレ","slug":"スパトレ","permalink":"https://asobitagari.github.io/tags/%E3%82%B9%E3%83%91%E3%83%88%E3%83%AC/"},{"name":"NHKラジオ","slug":"NHKラジオ","permalink":"https://asobitagari.github.io/tags/NHK%E3%83%A9%E3%82%B8%E3%82%AA/"},{"name":"オンラインレッスン","slug":"オンラインレッスン","permalink":"https://asobitagari.github.io/tags/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%AC%E3%83%83%E3%82%B9%E3%83%B3/"},{"name":"技術書典","slug":"技術書典","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8/"},{"name":"技術書典9","slug":"技術書典9","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B89/"},{"name":"技術書典10","slug":"技術書典10","permalink":"https://asobitagari.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B810/"},{"name":"load test","slug":"load-test","permalink":"https://asobitagari.github.io/tags/load-test/"},{"name":"development","slug":"development","permalink":"https://asobitagari.github.io/tags/development/"},{"name":"JMeter","slug":"JMeter","permalink":"https://asobitagari.github.io/tags/JMeter/"},{"name":"Vegeta","slug":"Vegeta","permalink":"https://asobitagari.github.io/tags/Vegeta/"},{"name":"docker","slug":"docker","permalink":"https://asobitagari.github.io/tags/docker/"},{"name":"container","slug":"container","permalink":"https://asobitagari.github.io/tags/container/"}]}