<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>遊びたがりブログ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asobitagari.github.io/"/>
  <updated>2019-11-06T07:32:36.278Z</updated>
  <id>https://asobitagari.github.io/</id>
  
  <author>
    <name>ざきさん</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker メモ</title>
    <link href="https://asobitagari.github.io/2019/11/05/docker-memo/"/>
    <id>https://asobitagari.github.io/2019/11/05/docker-memo/</id>
    <published>2019-11-05T09:31:19.000Z</published>
    <updated>2019-11-06T07:32:36.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="キーワード"><a href="#キーワード" class="headerlink" title="キーワード"></a>キーワード</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>　FROMは作成するDockerイメージのベースとなるイメージを指定でいる。<br>　FROMで指定できるDockerイメージはDocker Hubに公開されているものから指定できる。</p><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>　イメージ作者の情報などを記述。</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>　Dockerコンテナ内で使える環境変数を設定できる。</p><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p>　ビルド時に指定する引数から値を受け取ることができる。<br>　Dockerfile内で指定したARGの引数と、ビルド時に指定する引数はそろえる必要がある。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#コマンド：sampleargがそろえるべき名前</span><br><span class="line">&gt; docker image build --build-arg samplearg=okok -t example/dockerimage .</span><br><span class="line"></span><br><span class="line">#Dockerfileでは以下のように名前を指定して二行目のように値を取り出すことができる。</span><br><span class="line">ARG samplearg</span><br><span class="line">ENV BUILD_ARG=$&#123;samplearg&#125;</span><br></pre></td></tr></table></figure><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>　RUNはDockerイメージビルド時に、Dockerコンテナ内で実行するコマンドを定義する。<br>　RUNの引数には実行したいコマンドをそのまま記述する。</p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>　COPYはDockerを動作させているホストマシン上のファイルやディレクトリをDockerコンテナ内にコピーするためのキーワード。</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>　CMDはDockerコンテナとして実行する際に、コンテナ内で実行するプロセスを指定する。<br>　RUNはイメージをビルドするために使い、CMDはコンテナ起動時に一度実行される。</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>　ENTRYPOINTにはコマンドを記述する。CMDはENTRYPOINTへの引数となる。–entrypointでrun時に指定することで上書きできる。</p><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image build -t イメージ[:タグ名] Dockerfileまでのパス</span><br></pre></td></tr></table></figure><p>タグ名は省略するとlatestとなる。</p><h2 id="イメージからコンテナの実行"><a href="#イメージからコンテナの実行" class="headerlink" title="イメージからコンテナの実行"></a>イメージからコンテナの実行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [container] run [-d] イメージ名[/追加のパス]:タグ名</span><br></pre></td></tr></table></figure><p>-dオプションをつけないとフォアグランドで実行されてしまう。-dをつけて起動した場合はコンテナIDが標準出力に出力される。<br>containerは省略可能だが、最近の風潮ではタイプが長くなるがつけて記述するほうが好まれるらしい。</p><h2 id="起動中のコンテナの確認"><a href="#起動中のコンテナの確認" class="headerlink" title="起動中のコンテナの確認"></a>起動中のコンテナの確認</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>上記二つはどちらも同じ動作。<br>表示項目のフィルタリングもできる。コンテナIDだけ抽出する場合は以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --filter &quot;ancestor=[イメージ名]&quot; [-q]</span><br></pre></td></tr></table></figure><p>-q でヘッダーなし。</p><h2 id="起動中のコンテナの停止"><a href="#起動中のコンテナの停止" class="headerlink" title="起動中のコンテナの停止"></a>起動中のコンテナの停止</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop コンテナID</span><br></pre></td></tr></table></figure><p><code>docker container ls</code>と組み合わせることができる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop $(docker container ls --filter &quot;ancestor=[イメージ名&quot; -q])</span><br></pre></td></tr></table></figure><h2 id="ポートフォワーディング"><a href="#ポートフォワーディング" class="headerlink" title="ポートフォワーディング"></a>ポートフォワーディング</h2><p>ポートフォワーディングは<code>docker container run</code>の起動コマンド時に<code>-p</code>オプションで指定できる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d -p [ホストポート]:コンテナポート イメージの指定</span><br></pre></td></tr></table></figure><p>イメージの指定の仕方はコンテナの起動の項目を参照。<br>ホスト側のポートは省略することができ、省略時は自動で空いているエフェメラルポートが割り当てられる。<br>割り当てられたポートは<code>docker container ls</code>で表示される<code>ports</code>の項目で確認できる。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h2&gt;&lt;h3 id=&quot;キーワード&quot;&gt;&lt;a href=&quot;#キーワード&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="docker" scheme="https://asobitagari.github.io/tags/docker/"/>
    
      <category term="container" scheme="https://asobitagari.github.io/tags/container/"/>
    
      <category term="development" scheme="https://asobitagari.github.io/tags/development/"/>
    
  </entry>
  
</feed>
